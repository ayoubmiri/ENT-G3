version: '3.8'
services:

  ###############  admin   ###################
  admin-backend:
    build:
      context: ./admin-microservice/admin-backend
    container_name: admin-backend
    env_file:
      - .env
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
    depends_on:
      admin-cassandra:
        condition: service_healthy
    networks:
      - est-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${ADMIN_BACKEND_HOST}:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-cassandra:
    image: cassandra:latest
    container_name: admin-cassandra
    hostname: ${CASSANDRA_HOST}
    ports:
      - "${CASSANDRA_PORT}:9042"
    volumes:
      - admin_cassandra_data:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_DC=${CASSANDRA_DC}
      - CASSANDRA_SEEDS=${CASSANDRA_SEEDS}
      - CASSANDRA_AUTHENTICATOR=${CASSANDRA_AUTHENTICATOR}
      - CASSANDRA_SUPERUSER_USERNAME=${CASSANDRA_USERNAME}
      - CASSANDRA_SUPERUSER_PASSWORD=${CASSANDRA_PASSWORD}
      - MAX_HEAP_SIZE=${CASSANDRA_MAX_HEAP_SIZE}
      - HEAP_NEWSIZE=${CASSANDRA_HEAP_NEWSIZE}
    networks:
      - est-network
    healthcheck:
      test: ["CMD", "cqlsh", "-u", "${CASSANDRA_USERNAME}", "-p", "${CASSANDRA_PASSWORD}", "-e", "DESCRIBE KEYSPACES"]
      interval: 30s
      timeout: 10s
      retries: 5

  # admin-frontend:
  #   build:
  #     context: ./admin-microservice/admin-frontend
  #     dockerfile: Dockerfile
  #   container_name: admin-frontend
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - est-network
  


  ###############  upload   ###################
  minio-backend:
    build: ./upload-microservice
    ports:
      - "8002:8000"
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=uploads
    depends_on:
      - minio
    networks:
      - est-network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - est-network



  ###############  ent    ###################

  # ent-backent:
  #   build:
  #     context: ./ent-microservice/est-sale-backend
  #   container_name: ent-fastapi

  #   ports:
  #     - "8003:8000"
  #   environment:
  #     - PYTHONPATH=/app
  #   #   - CASSANDRA_HOST=ent-cassandra
  #   #   - CASSANDRA_USERNAME=cassandra
  #   #   - CASSANDRA_PASSWORD=cassandra
  #   # depends_on:
  #   #   ent-cassandra:
  #   #     condition: service_healthy
  #   networks:
  #     - est-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3


  # ent-frontend:
  #   build:
  #     context: ./ent-microservice/ent-frontend
  #     dockerfile: Dockerfile
  #   container_name: ent-frontend 
  #   ports:
  #     - "3001:3000"
  #   networks:
  #     - est-network


  ###############  auth    ###################

  auth-service:
    build:
      context: ./auth-microservice/app
    container_name: auth-service
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - keycloak
    volumes:
      - ./auth-microservice/app:/app
    networks:
      - est-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://auth-service:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KEYCLOAK_ADMIN=${KEYCLOAK_CONSOLE_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_CONSOLE_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    volumes:
      - ./auth-microservice/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: ["start-dev", "--import-realm"]
    networks:
      - est-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5


networks:
  est-network:
    external: true



volumes:
  admin_cassandra_data:
  minio-data:
  ent_cassandra_data:
